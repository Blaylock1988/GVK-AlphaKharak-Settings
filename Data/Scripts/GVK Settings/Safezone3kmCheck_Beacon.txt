using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using VRage.ModAPI;
using VRage.Game;
using VRage.Game.Components;
using VRageMath;
using VRage.Game.ModAPI;
using Sandbox.ModAPI;
using Sandbox.Game.Entities.Character.Components;
using Sandbox.Game.Components;
using Sandbox.Common.ObjectBuilders;
using VRage.ObjectBuilders;
using System.IO;
using System.Runtime.Remoting.Messaging;
using Sandbox.Game.Entities;
using Sandbox.Game;
using VRage.Utils;

namespace Safezone3kmCheck
{
    [MyEntityComponentDescriptor(typeof(Sandbox.Common.ObjectBuilders.MyObjectBuilder_SafeZone), false, new string[] { "SafeZoneBlock" })]
    public class Safezone3kmCheck_ActiveSafeZone : MyGameLogicComponent
    {
        private MyObjectBuilder_EntityBase _objectBuilder;
        private IMySafeZoneBlock activeSafeZone;
        private IMyPlayer client;

        private bool logicEnabled = false;

        public override void Init(MyObjectBuilder_EntityBase objectBuilder)
        {
            base.Init(objectBuilder);

            activeSafeZone = (Entity as IMySafeZoneBlock);
            Safezone3kmCheck_TargetSafeZoneBlock.activeSafeZoneList.Add(activeSafeZone);
			if (activeSafeZone != null)
            {
                logicEnabled = true;
                NeedsUpdate |= MyEntityUpdateEnum.EACH_FRAME;
                NeedsUpdate |= MyEntityUpdateEnum.EACH_10TH_FRAME;
            }

            client = MyAPIGateway.Session.LocalHumanPlayer;
        }

        public override void UpdateBeforeSimulation10()
        {
            base.UpdateBeforeSimulation10();

            MyAPIGateway.Parallel.Start(delegate {

                try
                {
                    if (!logicEnabled || activeSafeZone == null || !activeSafeZone.IsWorking || !activeSafeZone.IsSafeZoneEnabled() || client == null)
                    {
                        return;
                    }                       

                }
                catch (Exception e)
                {
                    MyAPIGateway.Utilities.ShowMessage("Safezone3kmCheck", "An error happened in the mod" + e);
                }
            });
        }

        public override void Close()
        {
            if (Entity == null)
            {
                return;
            }
                

            if (Safezone3kmCheck_TargetSafeZoneBlock.activeSafeZoneList.Contains(activeSafeZone))
            {
                Safezone3kmCheck_TargetSafeZoneBlock.activeSafeZoneList.Remove(activeSafeZone);
            }
        }

        public override void OnRemovedFromScene()
        {

            base.OnRemovedFromScene();

            var Block = Entity as IMySafeZoneBlock;

            if (Block == null)
            {
                return;
            }

            //Unregister any handlers here

        }
    }
}

