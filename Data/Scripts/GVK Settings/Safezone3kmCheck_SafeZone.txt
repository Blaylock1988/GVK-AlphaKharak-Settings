using SpaceEngineers.Game.ModAPI;
using System;
using VRage.ModAPI;
using VRage.Game.Components;
using VRageMath;
using VRage.Game.ModAPI;
using Sandbox.ModAPI;
using Sandbox.Common.ObjectBuilders;
using VRage.ObjectBuilders;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Xml.Serialization;
using ObjectBuilders.SafeZone;
using ProtoBuf;
using VRage;
using VRage.Game;
using VRage.Game.ObjectBuilders;
using VRage.Game.ObjectBuilders.ComponentSystem;
using VRage.Network;
using VRage.Serialization;
using VRage.Utils;

namespace Safezone3kmCheck
{
    [MyEntityComponentDescriptor(typeof(MyObjectBuilder_SafeZoneBlock), false)]
    public class Safezone3kmCheck_TargetSafeZoneBlock : MyGameLogicComponent
    {
        private IMySafeZoneBlock targetSafeZoneBlock;
        private IMyPlayer client;
        private bool isServer;
        private bool inZone;
        public static List<IMySafeZoneBlock> activeSafeZoneList = new List<IMySafeZoneBlock>();

        public override void Init(MyObjectBuilder_EntityBase objectBuilder)
        {
            base.Init(objectBuilder);

            targetSafeZoneBlock = (Entity as IMySafeZoneBlock);
            if (targetSafeZoneBlock != null)
            {
                NeedsUpdate |= MyEntityUpdateEnum.BEFORE_NEXT_FRAME;
                NeedsUpdate |= MyEntityUpdateEnum.EACH_10TH_FRAME;
            }
        }

        public override void UpdateOnceBeforeFrame()
        {
            base.UpdateOnceBeforeFrame();

            isServer = MyAPIGateway.Multiplayer.IsServer;
            client = MyAPIGateway.Session.LocalHumanPlayer;

            if (isServer)
            {
                targetSafeZoneBlock.IsWorkingChanged += WorkingStateChange;
            }
        }

        public override void UpdateBeforeSimulation10()
        {
            base.UpdateBeforeSimulation10();

            try
            {
                if (isServer)
                {
                    if (!targetSafeZoneBlock.Enabled) return;

                    foreach (var activeSafeZone in activeSafeZoneList)
                    {                        
                        if (activeSafeZone == null) continue;
                        if (!activeSafeZone.Enabled) continue;
                        if (!activeSafeZone.IsSafeZoneEnabled()) continue;
                        if (Vector3D.Distance(targetSafeZoneBlock.GetPosition(), activeSafeZone.GetPosition()) < 3000) //1km + SZ radius buffer
                        {
							targetSafeZoneBlock.Enabled = false;
							return;
                        }
                    }
                }
            }
            catch (Exception exc)
            {
                MyLog.Default.WriteLineAndConsole($"Failed looping through activeSafeZone list: {exc}");
            }
        }

        private void WorkingStateChange(IMyCubeBlock block)
        {
            if (!targetSafeZoneBlock.Enabled)
            {
                foreach (var activeSafeZone in activeSafeZoneList)
                {
                    if (activeSafeZone == null) continue;
                    if (!activeSafeZone.Enabled) continue;
					if (!activeSafeZone.IsSafeZoneEnabled()) continue;
                    if (Vector3D.Distance(targetSafeZoneBlock.GetPosition(), activeSafeZone.GetPosition()) < 3000) //1km + SZ radius buffer
                    {
						targetSafeZoneBlock.Enabled = false;
                    }
                }               
            }
        }

        public override void Close()
        {
            if (Entity == null)
                return;
        }

        public override void OnRemovedFromScene()
        {

            base.OnRemovedFromScene();

            if (Entity == null || Entity.MarkedForClose)
            {
                return;
            }

            var Block = Entity as IMySafeZoneBlock;

            if (Block == null) return;

            try
            {
                if (isServer)
                {
                    targetSafeZoneBlock.IsWorkingChanged -= WorkingStateChange;
                }

            }
            catch (Exception exc)
            {

                MyLog.Default.WriteLineAndConsole($"Failed to deregister event: {exc}");
                return;
            }
            //Unregister any handlers here
        }
    }
}
